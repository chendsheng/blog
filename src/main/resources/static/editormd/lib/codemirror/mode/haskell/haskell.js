(function(e){if(typeof exports=="object"&&typeof module=="object")e(require("../../lib/codemirror"));else if(typeof define=="function"&&define.amd)define(["../../lib/codemirror"],e);else e(CodeMirror)})(function(e){"use strict";e.defineMode("haskell",function(e,i){function a(e,r,t){r(t);return t(e,r)}var o=/[a-z_]/;var l=/[A-Z]/;var u=/\d/;var f=/[0-9A-Fa-f]/;var s=/[0-7]/;var c=/[a-z_A-Z0-9'\xa1-\uffff]/;var d=/[-!#$%&*+.\/<=>?@\\^|~:]/;var m=/[(),;[\]`{}]/;var h=/[ \t\v\f]/;function p(e,r){if(e.eatWhile(h)){return null}var t=e.next();if(m.test(t)){if(t=="{"&&e.eat("-")){var n="comment";if(e.eat("#")){n="meta"}return a(e,r,v(n,1))}return null}if(t=="'"){if(e.eat("\\")){e.next()}else{e.next()}if(e.eat("'")){return"string"}return"error"}if(t=='"'){return a(e,r,g)}if(l.test(t)){e.eatWhile(c);if(e.eat(".")){return"qualifier"}return"variable-2"}if(o.test(t)){e.eatWhile(c);return"variable"}if(u.test(t)){if(t=="0"){if(e.eat(/[xX]/)){e.eatWhile(f);return"integer"}if(e.eat(/[oO]/)){e.eatWhile(s);return"number"}}e.eatWhile(u);var n="number";if(e.match(/^\.\d+/)){n="number"}if(e.eat(/[eE]/)){n="number";e.eat(/[-+]/);e.eatWhile(u)}return n}if(t=="."&&e.eat("."))return"keyword";if(d.test(t)){if(t=="-"&&e.eat(/-/)){e.eatWhile(/-/);if(!e.eat(d)){e.skipToEnd();return"comment"}}var n="variable";if(t==":"){n="variable-2"}e.eatWhile(d);return n}return"error"}function v(i,a){if(a==0){return p}return function(e,r){var t=a;while(!e.eol()){var n=e.next();if(n=="{"&&e.eat("-")){++t}else if(n=="-"&&e.eat("}")){--t;if(t==0){r(p);return i}}}r(v(i,t));return i}}function g(e,r){while(!e.eol()){var t=e.next();if(t=='"'){r(p);return"string"}if(t=="\\"){if(e.eol()||e.eat(h)){r(n);return"string"}if(e.eat("&")){}else{e.next()}}}r(p);return"error"}function n(e,r){if(e.eat("\\")){return a(e,r,g)}e.next();r(p);return"error"}var b=function(){var t={};function e(r){return function(){for(var e=0;e<arguments.length;e++)t[arguments[e]]=r}}e("keyword")("case","class","data","default","deriving","do","else","foreign","if","import","in","infix","infixl","infixr","instance","let","module","newtype","of","then","type","where","_");e("keyword")("..",":","::","=","\\",'"',"<-","->","@","~","=>");e("builtin")("!!","$!","$","&&","+","++","-",".","/","/=","<","<=","=<<","==",">",">=",">>",">>=","^","^^","||","*","**");e("builtin")("Bool","Bounded","Char","Double","EQ","Either","Enum","Eq","False","FilePath","Float","Floating","Fractional","Functor","GT","IO","IOError","Int","Integer","Integral","Just","LT","Left","Maybe","Monad","Nothing","Num","Ord","Ordering","Rational","Read","ReadS","Real","RealFloat","RealFrac","Right","Show","ShowS","String","True");e("builtin")("abs","acos","acosh","all","and","any","appendFile","asTypeOf","asin","asinh","atan","atan2","atanh","break","catch","ceiling","compare","concat","concatMap","const","cos","cosh","curry","cycle","decodeFloat","div","divMod","drop","dropWhile","either","elem","encodeFloat","enumFrom","enumFromThen","enumFromThenTo","enumFromTo","error","even","exp","exponent","fail","filter","flip","floatDigits","floatRadix","floatRange","floor","fmap","foldl","foldl1","foldr","foldr1","fromEnum","fromInteger","fromIntegral","fromRational","fst","gcd","getChar","getContents","getLine","head","id","init","interact","ioError","isDenormalized","isIEEE","isInfinite","isNaN","isNegativeZero","iterate","last","lcm","length","lex","lines","log","logBase","lookup","map","mapM","mapM_","max","maxBound","maximum","maybe","min","minBound","minimum","mod","negate","not","notElem","null","odd","or","otherwise","pi","pred","print","product","properFraction","putChar","putStr","putStrLn","quot","quotRem","read","readFile","readIO","readList","readLn","readParen","reads","readsPrec","realToFrac","recip","rem","repeat","replicate","return","reverse","round","scaleFloat","scanl","scanl1","scanr","scanr1","seq","sequence","sequence_","show","showChar","showList","showParen","showString","shows","showsPrec","significand","signum","sin","sinh","snd","span","splitAt","sqrt","subtract","succ","sum","tail","take","takeWhile","tan","tanh","toEnum","toInteger","toRational","truncate","uncurry","undefined","unlines","until","unwords","unzip","unzip3","userError","words","writeFile","zip","zip3","zipWith","zipWith3");var r=i.overrideKeywords;if(r)for(var n in r)if(r.hasOwnProperty(n))t[n]=r[n];return t}();return{startState:function(){return{f:p}},copyState:function(e){return{f:e.f}},token:function(e,r){var t=r.f(e,function(e){r.f=e});var n=e.current();return b.hasOwnProperty(n)?b[n]:t},blockCommentStart:"{-",blockCommentEnd:"-}",lineComment:"--"}});e.defineMIME("text/x-haskell","haskell")});